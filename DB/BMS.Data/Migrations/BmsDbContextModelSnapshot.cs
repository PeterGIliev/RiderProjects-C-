// <auto-generated />
using BMS.Data;
using BMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BMS.Data.Migrations
{
    [DbContext(typeof(BmsDbContext))]
    partial class BmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BMS.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("BIC")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name", "BIC");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("BMS.Models.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .IsRequired();

                    b.Property<int>("BankId");

                    b.Property<int?>("ClientId");

                    b.Property<int?>("SupplierId");

                    b.HasKey("Id");

                    b.HasAlternateKey("AccountNumber");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("BMS.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PersonToContact");

                    b.Property<string>("Telephone");

                    b.Property<string>("VatNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name", "VatNumber");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BMS.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATE");

                    b.Property<string>("Description")
                        .IsUnicode(true);

                    b.Property<int>("EmployeeId");

                    b.Property<int>("OfferId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OfferId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("BMS.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Clearence");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BMS.Models.Inquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATE");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Inquiries");
                });

            modelBuilder.Entity("BMS.Models.InvoiceClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATE");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired();

                    b.Property<int>("ProjectId");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal>("VAT");

                    b.HasKey("Id");

                    b.HasAlternateKey("InvoiceNumber");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProjectId");

                    b.ToTable("InvoicesClient");
                });

            modelBuilder.Entity("BMS.Models.InvoiceSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATE");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired();

                    b.Property<int>("SupplierId");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal>("VAT");

                    b.HasKey("Id");

                    b.HasAlternateKey("InvoiceNumber");

                    b.HasIndex("SupplierId");

                    b.ToTable("InvoicesSupplier");
                });

            modelBuilder.Entity("BMS.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<int>("EmployeeId");

                    b.Property<int>("InquiryId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InquiryId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("BMS.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int?>("ContractId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATE");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<int>("OfferId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OfferId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BMS.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("PersonForContact")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<int?>("ProjectId");

                    b.Property<string>("Telephone");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasAlternateKey("Name", "VatNumber");

                    b.HasIndex("ProjectId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BMS.Models.BankAccount", b =>
                {
                    b.HasOne("BMS.Models.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMS.Models.Client", "Client")
                        .WithMany("BankAccounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMS.Models.Supplier", "Supplier")
                        .WithMany("BankAccounts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BMS.Models.Contract", b =>
                {
                    b.HasOne("BMS.Models.Employee", "Employee")
                        .WithMany("CreatedContracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMS.Models.Offer", "Offer")
                        .WithMany("Contracts")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BMS.Models.Inquiry", b =>
                {
                    b.HasOne("BMS.Models.Client", "Client")
                        .WithMany("Inquiries")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BMS.Models.InvoiceClient", b =>
                {
                    b.HasOne("BMS.Models.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMS.Models.Project", "Project")
                        .WithMany("InvoicesClient")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BMS.Models.InvoiceSupplier", b =>
                {
                    b.HasOne("BMS.Models.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BMS.Models.Offer", b =>
                {
                    b.HasOne("BMS.Models.Employee", "Employee")
                        .WithMany("CreatedOffers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMS.Models.Inquiry", "Inquiry")
                        .WithMany("Offers")
                        .HasForeignKey("InquiryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BMS.Models.Project", b =>
                {
                    b.HasOne("BMS.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMS.Models.Contract", "Contract")
                        .WithOne("Project")
                        .HasForeignKey("BMS.Models.Project", "ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMS.Models.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMS.Models.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BMS.Models.Supplier", b =>
                {
                    b.HasOne("BMS.Models.Project", "Project")
                        .WithMany("Suppliers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
